package com.spoony.spoony.data.repositoryimpl

import android.content.Context
import android.net.Uri
import android.os.Debug
import com.spoony.spoony.core.network.ContentUriRequestBody
import com.spoony.spoony.core.network.ContentUriRequestBodyLegacy
import com.spoony.spoony.data.datasource.CategoryDataSource
import com.spoony.spoony.data.datasource.PlaceDataSource
import com.spoony.spoony.data.dto.request.RegisterPostRequestDto
import com.spoony.spoony.data.mapper.toDomain
import com.spoony.spoony.data.service.PostService
import com.spoony.spoony.domain.entity.CategoryEntity
import com.spoony.spoony.domain.entity.PlaceEntity
import com.spoony.spoony.domain.repository.RegisterRepository
import dagger.hilt.android.qualifiers.ApplicationContext
import java.util.Locale
import javax.inject.Inject
import kotlin.system.measureTimeMillis
import kotlinx.serialization.json.Json
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.toRequestBody
import timber.log.Timber

class RegisterRepositoryImpl @Inject constructor(
    private val placeDataSource: PlaceDataSource,
    private val categoryDataSource: CategoryDataSource,
    private val postService: PostService,
    @ApplicationContext private val context: Context
) : RegisterRepository {
    override suspend fun getFoodCategories(): Result<List<CategoryEntity>> = runCatching {
        categoryDataSource.getFoodCategories().data!!.categoryMonoList.map { it.toDomain() }
    }

    override suspend fun searchPlace(query: String, display: Int): Result<List<PlaceEntity>> = runCatching {
        placeDataSource.getPlaces(query, display).data!!.placeList.map { it.toDomain() }
    }

    override suspend fun checkDuplicatePlace(
        userId: Int,
        latitude: Double,
        longitude: Double
    ): Result<Boolean> = runCatching {
        placeDataSource.checkDuplicatePlace(userId, latitude, longitude).data!!.idDuplicated
    }

    override suspend fun registerPost(
        userId: Int,
        title: String,
        description: String,
        placeName: String,
        placeAddress: String,
        placeRoadAddress: String,
        latitude: Double,
        longitude: Double,
        categoryId: Int,
        menuList: List<String>,
        photos: List<Uri>
    ): Result<Unit> = runCatching {
        val requestDto = RegisterPostRequestDto(
            userId = userId,
            title = title,
            description = description,
            placeName = placeName,
            placeAddress = placeAddress,
            placeRoadAddress = placeRoadAddress,
            latitude = latitude,
            longitude = longitude,
            categoryId = categoryId,
            menuList = menuList
        )

        val jsonString = Json.encodeToString(RegisterPostRequestDto.serializer(), requestDto)
        val requestBody = jsonString.toRequestBody("application/json".toMediaType())

        val photoParts = photos.map { uri ->
            testCompressionPerformance(uri)
        }

        postService.registerPost(
            data = requestBody,
            photos = photoParts
        ).data
    }

    /**
     * Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï ÏÑ±Îä• Î∞è Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÌèâÍ∞Ä Ìï®Ïàò
     *
     * Ï∏°Ï†ï Ìï≠Î™©:
     * - Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞:
     *   - ÏõêÎ≥∏ ÌÅ¨Í∏∞ (ContentResolver.available())
     *   - ÏïïÏ∂ï ÌõÑ ÌÅ¨Í∏∞ (RequestBody.contentLength())
     *
     * - Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ:
     *   - Java Heap: Runtime.totalMemory() - freeMemory()
     *   - Native Heap: Debug.getNativeHeapAllocatedSize()
     *   - GC Ïã§Ìñâ ÌõÑ Ï∏°Ï†ïÌïòÏó¨ Ï†ïÌôïÎèÑ Ìñ•ÏÉÅ
     *
     * - ÏÑ±Îä• ÏßÄÌëú:
     *   - ÏïïÏ∂ï ÏÜåÏöî ÏãúÍ∞Ñ (measureTimeMillis)
     *   - ÏïïÏ∂ïÎ•† (ÏõêÎ≥∏ ÎåÄÎπÑ ÏïïÏ∂ï ÌõÑ ÌÅ¨Í∏∞)
     *
     * - OOM ÏúÑÌóòÎèÑ ÌèâÍ∞Ä:
     *   - Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ/ÏõêÎ≥∏ ÌÅ¨Í∏∞ ÎπÑÏú® Í∏∞Î∞ò
     *   - ÎÇÆÏùå: 2Î∞∞ ÎØ∏Îßå
     *   - Ï§ëÍ∞Ñ: 2-3Î∞∞
     *   - ÎÜíÏùå: 3Î∞∞ Ï¥àÍ≥º
     *
     * Í≤∞Í≥ºÎäî Timber.d()Î•º ÌÜµÌï¥ ÏÉÅÏÑ∏ Î°úÍ∑∏Î°ú Ï∂úÎ†•Îê©ÎãàÎã§.
     *
     * @param uri ÏïïÏ∂ïÌï† Ïù¥ÎØ∏ÏßÄÏùò Uri
     * @return ÏïïÏ∂ïÎêú Ïù¥ÎØ∏ÏßÄÍ∞Ä Ìè¨Ìï®Îêú MultipartBody.Part
     */

    private suspend fun testCompressionPerformance(uri: Uri): MultipartBody.Part {
        val isTestMode = false // trueÏù¥Î©¥ Í∏∞Ï°¥ Î∞©Ïãù, falseÏù¥Î©¥ Í∞úÏÑ†Îêú Î∞©Ïãù

        // 1. ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ Ï∏°Ï†ï (Î∞îÏù¥Ìä∏ Îã®ÏúÑ)
        val originalSize: Long = context.contentResolver.openInputStream(uri)?.available()?.toLong() ?: -1L

        // 2. ÏïïÏ∂ï Ï†Ñ ÎÑ§Ïù¥Ìã∞Î∏å Ìûô Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Ï∏°Ï†ï (Î∞îÏù¥Ìä∏ Îã®ÏúÑ)
        val nativeHeapBefore: Long = getNativeHeapAllocatedSize()

        // 3. Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï Ï≤òÎ¶¨ Î∞è Ïã§Ìñâ ÏãúÍ∞Ñ Ï∏°Ï†ï
        lateinit var result: MultipartBody.Part
        val elapsedTime = measureTimeMillis {
            result = if (isTestMode) {
                // Í∏∞Ï°¥ ÏïïÏ∂ï Î∞©Ïãù (Ïòà: ContentUriRequestBodyLegacy ÏÇ¨Ïö©)
                ContentUriRequestBodyLegacy(context, uri).toFormData("photos")
            } else {
                // Í∞úÏÑ†Îêú ÏïïÏ∂ï Î∞©Ïãù (Ïòà: ContentUriRequestBody ÏÇ¨Ïö©, prepareImage() Ìò∏Ï∂ú)
                ContentUriRequestBody(context, uri).apply {
                    prepareImage()
                }.toFormData("photos")
            }
        }

        // 4. ÏïïÏ∂ï ÌõÑ ÎÑ§Ïù¥Ìã∞Î∏å Ìûô Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Ï∏°Ï†ï (Î∞îÏù¥Ìä∏ Îã®ÏúÑ)
        val nativeHeapAfter: Long = getNativeHeapAllocatedSize()

        // 5. ÏïïÏ∂ïÏóê ÏÇ¨Ïö©Îêú ÎÑ§Ïù¥Ìã∞Î∏å Ìûô Î©îÎ™®Î¶¨ (Î∞îÏù¥Ìä∏ Îã®ÏúÑ)
        val memoryUsedForCompression: Long = nativeHeapAfter - nativeHeapBefore

        // 6. ÏïïÏ∂ï ÌõÑ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ Ï∏°Ï†ï (RequestBodyÏùò contentLength())
        val compressedSize: Long = result.body.contentLength()

        // 7. Î°úÍ∑∏ Ï∂úÎ†• (MB Îã®ÏúÑÎ°ú Î≥ÄÌôò)
        val originalSizeMB = originalSize / (1024f * 1024f)
        val compressedSizeMB = compressedSize / (1024f * 1024f)
        val memoryUsedMB = memoryUsedForCompression / (1024f * 1024f)

        Timber.d(
            """
            ‚ú® Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï ÏÑ±Îä• Î∞è Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÌèâÍ∞Ä (${if (isTestMode) "Í∏∞Ï°¥" else "Í∞úÏÑ†"} Î∞©Ïãù):
            üìä ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞: $originalSizeMB MB
            üìâ ÏïïÏ∂ï ÌõÑ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞: $compressedSizeMB MB
            üìà ÏïïÏ∂ïÎ•†: ${"%.2f".format((1 - (compressedSize.toFloat() / originalSize)) * 100)}%
            ‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: ${elapsedTime}ms
            üíæ ÏïïÏ∂ïÏóê ÏÇ¨Ïö©Îêú ÎÑ§Ïù¥Ìã∞Î∏å Ìûô Î©îÎ™®Î¶¨: $memoryUsedMB MB
            """.trimIndent()
        )

        // ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ÏôÄ ÎπÑÍµêÌïòÏó¨, ÏïïÏ∂ïÏóê ÏÇ¨Ïö©Îêú Î©îÎ™®Î¶¨Í∞Ä Í≥ºÎèÑÌïòÎã§Î©¥ Í≤ΩÍ≥† Î°úÍ∑∏ Ï∂úÎ†• (OOM ÏúÑÌóò ÌåêÎã®)
        if (memoryUsedForCompression > originalSize) {
            Timber.w("Í≤ΩÍ≥†: ÏïïÏ∂ïÏóê ÏÇ¨Ïö©Îêú Î©îÎ™®Î¶¨($memoryUsedMB MB)Í∞Ä ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞($originalSizeMB MB)Î≥¥Îã§ ÌÅΩÎãàÎã§. OOM ÏúÑÌóòÏù¥ ÏûàÏùÑ Ïàò ÏûàÏäµÎãàÎã§.")
        }

        return result
    }

    /**
     * Debug APIÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÎÑ§Ïù¥Ìã∞Î∏å ÌûôÏóê Ìï†ÎãπÎêú Î©îÎ™®Î¶¨ ÌÅ¨Í∏∞Î•º Ï∏°Ï†ïÌï©ÎãàÎã§.
     * Î∞òÌôò Í∞íÏùÄ Î∞îÏù¥Ìä∏ Îã®ÏúÑÏûÖÎãàÎã§.
     */
    private fun getNativeHeapAllocatedSize(): Long {
        return Debug.getNativeHeapAllocatedSize()
    }

//    private suspend fun testCompressionPerformance(uri: Uri): MultipartBody.Part {
//        val isTestMode = false // trueÏù¥Î©¥ Í∏∞Ï°¥ Î∞©Ïãù, falseÏù¥Î©¥ Í∞úÏÑ†Îêú Î∞©Ïãù
//
//        // 1. ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ Ï∏°Ï†ï
//        val originalSize = context.contentResolver.openInputStream(uri)?.use {
//            it.available().toLong()
//        } ?: -1L
//
//        val beforeMemory = measureMemoryState()
//
//        // 3. Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï Ïã§Ìñâ Î∞è ÏãúÍ∞Ñ Ï∏°Ï†ï
//        lateinit var result: MultipartBody.Part
//        val compressionTime = measureTimeMillis {
//            result = if (isTestMode) {
//                ContentUriRequestBodyLegacy(context, uri).toFormData("photos")
//            } else {
//                ContentUriRequestBody(context, uri).apply {
//                    prepareImage()
//                }.toFormData("photos")
//            }
//        }
//
//        // 4. ÏïïÏ∂ï ÌõÑ Î©îÎ™®Î¶¨ ÏÉÅÌÉú
//        val afterMemory = measureMemoryState()
//
//        // 5. ÏïïÏ∂ïÎêú ÌÅ¨Í∏∞ ÌôïÏù∏
//        val compressedSize = result.body.contentLength()
//
//        // Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Í≥ÑÏÇ∞
//        val memoryDiff = afterMemory - beforeMemory
//
//        Timber.d(
//            """
//        üì∏ Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï ÏÑ±Îä• Î∂ÑÏÑù (${if (isTestMode) "Í∏∞Ï°¥" else "Í∞úÏÑ†"} Î∞©Ïãù):
//
//        üìä ÌÅ¨Í∏∞ Ï†ïÎ≥¥:
//        - ÏõêÎ≥∏: ${originalSize.bytesToMB()} MB
//        - ÏïïÏ∂ï ÌõÑ: ${compressedSize.bytesToMB()} MB
//        - ÏïïÏ∂ïÎ•†: ${calculateCompressionRate(originalSize, compressedSize)}%
//
//        üíæ Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ:
//        - ÏïïÏ∂ï Ï†Ñ: ${beforeMemory.bytesToMB()} MB
//        - ÏïïÏ∂ï ÌõÑ: ${afterMemory.bytesToMB()} MB
//        - Ïã§Ï†ú ÏÇ¨Ïö©: ${maxOf(0L, memoryDiff).bytesToMB()} MB
//
//        ‚ö° ÏÑ±Îä•:
//        - Ï≤òÎ¶¨ ÏãúÍ∞Ñ: ${compressionTime}ms
//        - ÏµúÎåÄ Í∞ÄÏö© Î©îÎ™®Î¶¨: ${Runtime.getRuntime().maxMemory().bytesToMB()} MB
//
//        ‚ö†Ô∏è OOM ÏúÑÌóòÎèÑ: ${assessOOMRisk(originalSize, maxOf(0L, memoryDiff))}
//            """.trimIndent()
//        )
//
//        return result
//    }
//
//    private fun Long.bytesToMB() = this / (1024.0 * 1024.0)
//
//    private fun calculateCompressionRate(originalSize: Long, compressedSize: Long): String {
//        return String.format(Locale.US, "%.1f", (1 - compressedSize.toDouble() / originalSize) * 100)
//    }
//
//    private fun assessOOMRisk(originalSize: Long, usedMemory: Long): String {
//        val ratio = usedMemory.toDouble() / originalSize.toDouble()
//        return when {
//            ratio > 3.0 -> "ÎÜíÏùå (Î©îÎ™®Î¶¨ ÏÇ¨Ïö©ÎüâÏù¥ ÏõêÎ≥∏ ÎåÄÎπÑ 3Î∞∞ Ï¥àÍ≥º)"
//            ratio > 2.0 -> "Ï§ëÍ∞Ñ (Î©îÎ™®Î¶¨ ÏÇ¨Ïö©ÎüâÏù¥ ÏõêÎ≥∏ ÎåÄÎπÑ 2-3Î∞∞)"
//            else -> "ÎÇÆÏùå (Î©îÎ™®Î¶¨ ÏÇ¨Ïö©ÎüâÏù¥ ÏõêÎ≥∏ ÎåÄÎπÑ 2Î∞∞ ÎØ∏Îßå)"
//        }
//    }
//
//    private fun measureMemoryState(): Long {
//        var attempt = 0
//        var memoryState: Long
//
//        // ÏµúÎåÄ 3Î≤à ÏãúÎèÑÌïòÎ©∞ ÏïàÏ†ïÏ†ÅÏù∏ Î©îÎ™®Î¶¨ Ï∏°Ï†ïÍ∞íÏùÑ ÏñªÏùå
//        do {
//            System.gc()
//            Thread.sleep(200) // GC ÏôÑÎ£åÎ•º ÏúÑÌï¥ ÎåÄÍ∏∞ ÏãúÍ∞Ñ Ï¶ùÍ∞Ä
//
//            val javaHeap = Runtime.getRuntime().run {
//                totalMemory() - freeMemory()
//            }
//            val nativeHeap = Debug.getNativeHeapAllocatedSize()
//            memoryState = javaHeap + nativeHeap
//
//            attempt++
//        } while (attempt < 3 && memoryState < 0)
//
//        return memoryState
//    }
}
